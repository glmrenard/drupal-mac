<?php
/**
 * Implements hook_field_formatter_info().
 */
function d7dev_field_formatter_info() {
  return array(
    'd7dev_integer_duration' => array(
      'label' => t('Duration'),
      'field types' => array('number_integer'),
    )
  );
}

/**
 * Implements hook_field_info_alter().
 */
function d7dev_field_info_alter(&$info) {
  $info['number_integer']['microdata'] = TRUE;
}

/**
 * Implements hook_field_formatter_view().
 */
function d7dev_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];

  switch ($display['type']) {
    case 'd7dev_integer_duration':
      foreach ($items as $delta => $item) {
        //Some simple math to covert the duration minutes to hours and the remainder as minutes
        $hours = floor($item['value']/60);
        $minutes = $item['value']%60;
        //Get greatest common denominator of minutes to convert to fraction of hours
        $minutes_gcd = gcd($minutes, 60);
        //&frasl; is the html entity for the fraction separator, and we use the sup and sub html element to give
        //the appearance of a fraction
        $minutes_fraction = '<sup>' . $minutes/$minutes_gcd . '</sup>&frasl;<sub>' . 60/$minutes_gcd . '</sub>';
        $markup = $hours > 0 ? $hours . ' and ' . $minutes_fraction . ' hours' : $minutes_fraction . ' hours';
        //finally, return our formatted value as the markup for this field formatter
        $element[$delta] = array('#markup' => $markup);
      }
      break;
  }

  return $element;
}

/**
  * Implements hook_image_default_styles().
   */
function d7dev_image_default_styles() {
  $styles = array();

  $styles['small'] = array(
    'effects' => array(
      array(
        'name' => 'image_scale',
        'data' => array(
          'width' => 160,
          'height' => 120,
          'upscale' => 1,
        ),
        'weight' => 0,
      ),
      array(
        'name' => 'image_desaturate',
        'data' => array(),
        'weight' => 1,
      ),
    ),
  );

  return $styles;
}

 /**
     * Implements hook_form_FORM_ID_alter().
     */
function d7dev_form_webform_client_form_55_alter(&$form, &$form_state,$form_id) {
  //loop through all of the webform fields
  foreach($form['submitted'] as &$field) {
    //if the webform_component type is set and is email,
    //then this is a field we want to change
    if(isset($field['#webform_component']['type']) && $field['#webform_component']['type'] == 'email') {
      $field['#type']  = 'emailfield'; //Set the field type to emailfield
      //dpm($field);
    }
  }

  //dd($form, 'd7dev_form_webform_client_form_55_alter');
  //pm($form);
}

//simple helper function to get gcd of minutes
function gcd($a, $b) {
  $b = ($a == 0) ? 0 : $b;
  return ($a % $b) ? gcd($b, abs($a - $b)) : $b;
}
